#!/bin/bash
#
# Development language for Go
COMMAND=$1

# include summary section under $MYBINTOP/include
MYBINTOP=$HOME/common/bin
SUMMARYLIST=("go" "go_mysql" "gin")

function usage() {
cat << EOF
    For module management:
    dgo module COMMAND
        COMMAND:
        init <modname>      Init Go project module dependency
        update              Update go module dependency
        list                List module dependency
        graph <filename>    Generate dependency graph
        redir <modname> <path>  Redirect external Go package to point
                                to local path and Update dependency

    For program compilation and test:
    dgo COMMAND
    COMMAND:
        run [PATH]          Compile and Run a Go program
        test                Test go package (xxx_test.go)

    For deployment:
        vendor              Vendoring by downloading 3rd party Go modules locally
        build               Compiles the packages, along with their dependencies
        install             Compiles the packages, along with their dependencies and
                            Install the binary
        inst-path           Show installed path

    For information:
    dgo help                Show help message
    dgo summary <topic>     Show summary of Golang development.
                            topic=[${SUMMARYLIST[@]}]
EOF
}

function print_topic() {
    echo -e "\n# $@"
}

function run_cmd() {
    COLOR='\033[0;36m'
    NCOLOR='\033[0m'
    echo -e "$COLOR\$ $@ $NCOLOR"
    eval $@
}

function print_cmd() {
    COLOR='\033[0;36m'
    NCOLOR='\033[0m'
    echo -e "$COLOR\$ $@ $NCOLOR"
}

function print_warn() {
    COLOR='\033[0;31m'
    NCOLOR='\033[0m'
    echo -e "$COLOR $@ $NCOLOR"
}

function show_summary() {
    local SUBTOPIC=$1

    for i in ${!SUMMARYLIST[@]}; do
        if [ x"$SUBTOPIC" == x"${SUMMARYLIST[$i]}" ]; then
            local SUMMARY="summary_${SUBTOPIC}"
            source $MYBINTOP/include/$SUBTOPIC-summary
            $SUMMARY
            exit 0
        fi
    done
    usage
}

function dgo_diag_header() {
    local DOTFILE=$1
cat << EOF > $DOTFILE
digraph {
    graph [overlap=false, size=14];
    root="$(go list -m)";
    node [ shape = plaintext, fontname = "Helvetica", fontsize=24];
    "$(go list -m)" [style = filled, fillcolor = "#E94762"];
EOF
}

function dgo_dependency_graph() {
    local DOTFILE=$1

    go mod graph | sed -Ee 's/@[^[:blank:]]+//g' | sort | uniq > unver.txt
    dgo_diag_header $DOTFILE.dot
    cat unver.txt | awk '{print "\""$1"\" -> \""$2"\""};' >> $DOTFILE.dot
    echo "}" >> $DOTFILE.dot
    sed -i '' 's+\("github.com/[^/]*/\)\([^"]*"\)+\1\\n\2+g' $DOTFILE.dot
    sfdp -Tsvg -o $DOTFILE.svg $DOTFILE.dot
    rm unver.txt
    rm $DOTFILE.dot
    if [ -f "$DOTFILE.svg" ]; then
        run_cmd open $DOTFILE.svg
    fi
}

if [ x"$COMMAND" == x"help" ] || [ x"$COMMAND" == x"" ]; then
    usage
    exit 0
fi
if [ x"$COMMAND" == x"summary" ]; then
    shift
    SUBTOPIC=$1
    show_summary $SUBTOPIC
    exit 0
fi
if [ x"$COMMAND" == x"module" ]; then
    shift
    SUBCMD=$1
    if [ x"$SUBCMD" == x"init" ]; then
        MODNAME=$2
        if [ x"$MODNAME" == x"" ]; then
            print_warn "MODNAME is not set"
            usage
            exit 0
        fi
        run_cmd go mod init $MODNAME
        exit 0
    fi
    if [ x"$SUBCMD" == x"update" ]; then
        run_cmd go mod tidy
        exit 0
    fi
    if [ x"$SUBCMD" == x"list" ]; then
        run_cmd go list -m all
        exit 0
    fi
    if [ x"$SUBCMD" == x"graph" ]; then
        DOTFILE=$2
        if [ x"$DOTFILE" == x"" ]; then
            print_warn "DOTFILE is not set"
            usage
            exit 0
        fi
        dgo_dependency_graph $DOTFILE
        exit 0
    fi
    if [ x"$SUBCMD" == x"redir" ]; then
        MODNAME=$2
        LOCALPATH=$3
        if [ x"$MODNAME" == x"" ] || [ x"$LOCALPATH" == x"" ]; then
            print_warn "MODNAME or LOCALPATH is not set"
            usage
            exit 0
        fi
        run_cmd go mod edit -replace $MODNAME=$LOCALPATH
        run_cmd go mod tidy
        exit 0
    fi
fi
if [ x"$COMMAND" == x"run" ]; then
    shift
    FILEPATH=$1
    if [ x"$FILEPATH" == x"" ]; then
        FILEPATH="."
    fi
    run_cmd go run $FILEPATH
    exit 0
fi
if [ x"$COMMAND" == x"build" ]; then
    run_cmd go build
    exit 0
fi
if [ x"$COMMAND" == x"vendor" ]; then
    run_cmd go mod vendor
    exit 0
fi
if [ x"$COMMAND" == x"test" ]; then
    run_cmd go test -v
    exit 0
fi
if [ x"$COMMAND" == x"install" ]; then
    run_cmd go install
    exit 0
fi
if [ x"$COMMAND" == x"inst-path" ]; then
    run_cmd go list -f '{{.Target}}'
    exit 0
fi
usage
