#!/bin/bash

COMMAND=$1
OUTDIR=$2
MARCH=$3

KCFGLIST=($(find $HOME/common/bin/kconfig/ -name "linux-*" -printf "%P "))

function usage() {
cat << EOF
    blinux COMMAND [outdir] [march]
    COMMAND:
        help        Show help message
        all         Build all
        check       Check build with C=1 and W1
        modules     Build kernel modules
        tar         Build kernel tarxz-pkg
        deb         Build kernel debian binary pkg
        rpm         Build kernel rpm-pkg
        bpf         Build samples/bpf
        tools       Build kernel tools
        headers     Install Linux kernel headers
        clean       Clean Linux kernel build artifacts

    blinux checkcfg [kconfig]  Check .config against <kconfig> baseline
                    kconfig=[ ${KCFGLIST[@]} ]

    blinux pw [SUBCMD] [ML] [SERIES]
        SUBCMD:
        apply        Apply patch series from patch-work
        download     Download patch series in mbox format

        Note: For netdev, look up series number by hovering over the 'series' button
              from https://patchwork.kernel.org/project/netdevbpf/list

    blinux pw list [ML] <OPTION>
        OPTION:
        --limit N                     List latest N patches
        --submitter name@email.com    List patches from an email
EOF
}

function print_topic() {
    if [ x"$SILENT" == x"-s" ] || [ x"$SILENT" == x"--silent" ]; then
        return
    else
        echo -e "# $@"
    fi
}

function run_cmd() {
    COLOR='\033[0;36m'
    NCOLOR='\033[0m'
    echo -e "$COLOR\$ $@ $NCOLOR"
    eval $@
}

function print_cmd() {
    COLOR='\033[0;36m'
    NCOLOR='\033[0m'
    echo -e "$COLOR\$ $@ $NCOLOR"
}

function print_warn() {
    COLOR='\033[0;31m'
    NCOLOR='\033[0m'
    echo -e "$COLOR $@ $NCOLOR"
}

function check_kconfig() {
    local KCONFIG1=$1
    local KCONFIG2=$2
    local HAS_KCONFIG1=0
    local HAS_KCONFIG2=0

    if [ x"$KCONFIG1" != x"" ]; then
        HAS_KCONFIG1=$(grep "$KCONFIG1" -c .config)
    fi

    if [ x"$KCONFIG2" != x"" ]; then
        HAS_KCONFIG2=$(grep "$KCONFIG2" -c .config)
    fi

    if [ $HAS_KCONFIG1 -eq 1 ]; then
         echo "DETECTED: $KCONFIG1"
    fi

    if [ $HAS_KCONFIG2 -eq 1 ]; then
        echo "DETECTED: $KCONFIG2"
    fi

    if [ $HAS_KCONFIG1 -eq 0 ] && [ $HAS_KCONFIG2 -eq 0 ]; then
        echo "!!! Please set $KCONFIG1 or $KCONFIG2"
        exit 1
    fi
}

function kconfig_dependency() {
    local KCFGFILE=$1

    source $HOME/common/bin/kconfig/$KCFGFILE
}

#CONFIG_USB_ANNOUNCE_NEW_DEVICES=y
#CONFIG_USB_DYNAMIC_MINORS=y
#CONFIG_USB_OHCI_HCD=y
#CONFIG_USB_OHCI_HCD_PCI=y
#CONFIG_USB_SERIAL_SIMPLE=m


function blinux_all() {
    print_topic Build all
    run_cmd ARCH=$MARCH make -j32 O=$OUTDIR
}

function blinux_modules() {
    print_topic Build kernel modules
    run_cmd ARCH=$MARCH make -j32 W=1 O=$OUTDIR modules
}

function blinux_tar() {
    print_topic Build kernel tarxz-pkg
    run_cmd ARCH=$MARCH make -j32 O=$OUTDIR tarxz-pkg
}

function blinux_deb() {
    print_topic Build kernel binary deb-pkg
    run_cmd ARCH=$MARCH make -j32 O=$OUTDIR bindeb-pkg
}

function blinux_rpm() {
    print_topic Build kernel tarxz-pkg
    run_cmd ARCH=$MARCH make -j32 O=$OUTDIR rpm-pkg
}

function blinux_bpf() {
    # Reference: https://www.kernel.org/doc/readme/samples-bpf-README.rst
    #
    # samples/bpf/xdpsock_user.c:27:10: fatal error: sys/capability.h: No such file or directory
    # #include <sys/capability.h>
    # sudo apt-get install libcap-dev
    print_topic Build samples/bpf
    ARCH=$MARCH make M=samples/bpf O=$OUTDIR
}

function blinux_headers() {
    print_topic Install kernel headers
    run_cmd ARCH=$MARCH make headers_install O=$OUTDIR
}

function blinux_clean() {
    print_topic Clean kernel build artifact
    run_cmd ARCH=$MARCH make -j32 O=$OUTDIR -C tools clean
    run_cmd ARCH=$MARCH make -j32 O=$OUTDIR -C samples/bpf clean
    run_cmd ARCH=$MARCH make -j32 O=$OUTDIR clean
}

function blinux_tools() {
    #Builds tools folder
    # software dependency: sudo apt install libpci-dev libpopt-dev
    # To check on what other smaller option, goto Linux directory, run "ARCH=x86 make -C tools"
    ARCH=x86 make O=$OUTDIR tools/all
    ARCH=x86 make O=$OUTDIR tools/install
}

function blinux_sanity() {
    print_topic Build for kernel sanity check

    run_cmd cp .config .config_sanity_backup

    run_cmd ARCH=$MARCH make -j32 O=$OUTDIR allmodconfig

    run_cmd ARCH=$MARCH make -j32 O=$OUTDIR allyesconfig

    run_cmd rm -rf nohup.out
    run_cmd ARCH=$MARCH nohup make -j32 O=$OUTDIR W=1 C=2

    print_cmd '# Manual step to check for issue ...'
    print_cmd 'cat nohup.out | grep "stmmac\|pcs"'

    run_cmd cp .config_sanity_backup .config
}

function blinux_check() {
    print_topic Check for build error, warn and sparse
    run_cmd ARCH=$MARCH make -j32 W=1 C=1 O=$OUTDIR 2>build.warn
    print_topic 'grep <keyword> build.warn after build complete'
}

function blinux_pw_apply_download() {
    local SUBCMD=$1
    local ML=$2
    local SERIES=$3

    if [ x"$ML" == x"netdev" ]; then
        run_cmd git-pw --server https://patchwork.kernel.org/api/1.2 --project netdevbpf series $SUBCMD $SERIES
    else
        usage
        print_warn "ERROR: New \"ML=$ML\" used. Need to setup the --server and --project for it"
        exit 0
    fi
}

function blinux_pw_list() {
    local SUBCMD=$1
    local ML=$2
    shift 2
    local OPTION=$@

    if [ x"$ML" == x"netdev" ]; then
        run_cmd git-pw --server https://patchwork.kernel.org/api/1.2 --project netdevbpf series list $OPTION
    else
        usage
        print_warn "ERROR: New \"ML=$ML\" used. Need to setup the --server and --project for it"
        exit 0
    fi
}

if [ x"$COMMAND" == x"help" ] || [ x"$COMMAND" == x"" ]; then
    usage
    exit 0
fi

if [ x"$MARCH" == x"" ]; then
    MARCH=x86
fi

if [ x"$OUTDIR" == x"" ]; then
    OUTDIR=.
fi

if [ x"$COMMAND" == x"pw" ]; then
    SUBCMD=$2
    ML=$3

    if [ x"$SUBCMD" == x"apply" ] || [ x"$SUBCMD" == x"download" ]; then
        SERIES=$4
        blinux_pw_apply_download $SUBCMD $ML $SERIES
        exit 0
    fi

    if [ x"$SUBCMD" == x"list" ]; then
        shift 3
        OPTION=$@
        blinux_pw_list $SUBCMD $ML $OPTION
        exit 0
    fi
    usage
    exit 0
fi

if [ x"$COMMAND" == x"checkcfg" ]; then
    KCFGFILE=$2
    for i in ${!KCFGLIST[@]}; do
        if [ x"$KCFGFILE" == x"${KCFGLIST[$i]}" ]; then
            kconfig_dependency $KCFGFILE
            exit 0
        fi
    done
    usage
    print_warn "ERROR: <kconfig> is incorrect"
    exit 0
fi

if [ x"$COMMAND" == x"all" ]; then
    blinux_all
    exit 0
fi
if [ x"$COMMAND" == x"modules" ]; then
    blinux_modules
    exit 0
fi
if [ x"$COMMAND" == x"rpm" ]; then
    blinux_rpm
    exit 0
fi
if [ x"$COMMAND" == x"tar" ]; then
    blinux_tar
    exit 0
fi
if [ x"$COMMAND" == x"deb" ]; then
    blinux_deb
    exit 0
fi
if [ x"$COMMAND" == x"bpf" ]; then
    blinux_bpf
    exit 0
fi
if [ x"$COMMAND" == x"tools" ]; then
    blinux_tools
    exit 0
fi
if [ x"$COMMAND" == x"headers" ]; then
    blinux_headers
    exit 0
fi
if [ x"$COMMAND" == x"clean" ]; then
    blinux_clean
    exit 0
fi
if [ x"$COMMAND" == x"check" ]; then
    blinux_check
    exit 0
fi

usage
