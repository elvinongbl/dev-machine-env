#!/bin/bash

function summary_python_virtualenv() {
cat << EOF

    Summary of Python Virtual Environment
    =====================================

    * "virtualenv" is used to create isolated Python environments
       (Python interpreter and packages within it).

    * It is used to solve problems related to package dependencies,
      version and permissions.

    * The isolated environment allows its own installation directories
      and does not share libraries with other virtualenv environment.

    * Virtualenv is not portable and may have broken parts when moved
      between directories on the same filesystem or between computers
      and operating systems.

    * As virtualenv is not portable, one can use 'pip freeze' to dump
      all Python environment. However, the list may contain other package
      that you have installed earlier and the list can grow to be very
      big.

    * For project that requires good package dependencies management,
      a tool known as 'Poetry' is a better tool.

    * If your project has external and low-level dependencies, system-
      level isolation such as virtualization tools (VMware, VirtualBox)
      or container systems (Docker and Rocket) is better approach than
      application level isolation provided by virtualenv.

    Installation
    ============
    $ pip install -U virtualenv

    Usage
    =====
    * To create virtual environment
      $ virtualenv -p $(which python3) <my_proj_env>
      OR,
      $ python3.9 -m venv <env name>

      Note: It create <env name> directory with sub-directories:-
            bin/ - Python executables
            scripts/ - executables provided by other packages
            lib/ and include/ - supporting library files for the new
                                Python interpreter inside the virtual
                                environment.
      Note: New packages are installed in <env-name>/lib/pythonX.Y/
            site-packages

    * To activate your project environment
      $ source <my_proj_env>/bin/activate
      OR
      $ . <my_proj_env>/bin/activate

    * To deactivate your project environment
    (my_proj_env) $ deactivate

    * As Inside virtual environment, you can use 'pip' to reconstruct
      the environment
      $ pip install -r requirement.txt

    * Example of requirement.txt
      -------------------------------
      eventlet==0.17.4
      graceful==0.1.1
      falcon>=0.3.0,<0.5.0
      pytz
      -------------------------------

    Reference
    =========
    [1] https://virtualenv.pypa.io/en/latest/

EOF
}

function summary_python_pip() {
cat << EOF

    Summary of PIP (Pip Installs Packages)
    =====================================

    * Each Python version has its own pip.

    * Operation of pip:-
      - Connect to PyPI repo at https://pypi.python.org/pypi
      - Download and install the appropriate package to the
        site-packages.

    * Under virtualenv, pip and python are linked to the Python
      version that you specify when you create the env.

    * If you are not under virtual environment, use
      $ python3.5 -m pip install <something>
      $ python3.8 -m pip install <something>

    Installation
    ============
    * Starting from version 2.7.9 and 3.4 of CPython, every Python
      release comes with an 'ensurepip' module [1]:
      $ python3 -m ensurepip

    Usage
    =====
    * To install Python package
      $ pip install <package-name>

      Note: pip installs new package from Python Package Index (PyPI) into
            one of the available site-packages directories.
      Note: pip installs a particular verstion and may overwrite the
            version in global site-packages. This may overwrite the version
            patched by your Linux distro.

    * To inspect paths where Python searches for modules and packages
      $ python3 -m site

      Note: Packages installed in local site-packages (USER_SITE) will
            take precendence over packages installed in the global
            site-paclages

    * To install packages on USER_SITE
      $ pip install --user <package-name>

      Note: without --user, pip tries to install to global site-packages
            and fall-back to user site-packages if that is not possible.
            Use 'sudo' if you need to install on global site-packages.
            $ sudo -H pip install <package-name>.

    * To list installed packages
      $ pip list

    * To show package information
      $ pip show <package name>

    * To uninstall package
      $ pip uninstall <package name>

    * To output all installed packages in requirements format
      $ pip freeze

    Proxy
    =====
    * Pip does not use global environment variables for network proxy.
      It uses /etc/pip.conf

    * Example of /etc/pip.conf
      -------------------------------------------
      [global]
      proxy = http://myproxy.hostname:8080
      -------------------------------------------

    Reference
    =========
    [1] https://pip.pypa.io/en/stable/installation/

EOF
}

function summary_python_doc() {
cat << EOF

    * PEP (Python Enhancement Proposal) is where community discussion about
      major releases, architecture and design changes going into Python.
      https://peps.python.org/

    * Python Weekly
      https://www.pythonweekly.com/

    * PyCoder's Weekly
      https://pycoders.com/

    * A curated list of awesome Python frameworks, libraries, software and resources.
      https://github.com/vinta/awesome-python

    * Interesting and valuable articles divided into 100 categories
      https://github.com/kirang89/pycrumbs

    * Curates decibans of Python libraries and resources for scientific programming
      and mathematical and statistical computing.
      https://github.com/svaksha/pythonidae

EOF
}

function summary_python_poetry() {
cat << EOF

  Summary of Poetry as dependency management system
  =================================================

  * Poetry is dependency management for Python virtual environment.

  Installation
  ============
  $ pip install --user poetry
  OR
  $ curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py -o install-poetry.py
  $ python3 install-poetry.py

  Note: The poetry installer installs the tool at $HOME/.poetry/bin which is automatically added to
        $HOME/.profile.

  $ Install poetry with its HOME location specified
  $ POETRY_HOME=/etc/poetry python3 install-poetry.py

  Uninstall
  =========
  $ python3 install-poetry.py --uninstall

  Updating
  ========
  $ poetry self update
  OR
  $ poetry self update <version>

  Usage
  =====
  * To create a new virtual environment with Poetry
    $ poetry new <my-project>

    Note: the core of Poetry is 'pyproject.toml' which stores project configuration.

  * To initialize an exisiting project to be managed by Poetry
    $ poetry init

  * To enter virtual environment created by Poetry
    $ cd <project>
    $ poetry shell

  * To exit virtual environment
    (virt-env) $ exit

  * To add new package to virtual environment
    $ poetry add <package name>

  * To install package dependencies
    $ poetry install

    Note: Poetry resolves all software dependencies and after installations, lock
          all these software dependencies into poetry.lock file (which should be
          committed into your git repo)

    Note: If there are poetry.lock and pyproject.toml in folder, poetry uses the
          software versions locked in poetry.lock to install your environment.
          So, it is possible that your version in pyproject.toml and poetry.lock
          are different and the version in poetry.lock always take precendence.

  * To lock an environment (to avoid dependency issue)
    $ poetry lock

    Note: This will update a verbose poetry.lock file (snapshot of dependency
          resolution process.

  * To show current software project requirement dependency
    $ poetry show --tree

        pendulum 1.5.1 Python datetimes made easy.
        ├── python-dateutil >=2.6.0.0,<3.0.0.0
        │   └── six >=1.5
        ├── pytzdata >=2018.3.0.0
        └── tzlocal >=1.5.0.0,<2.0.0.0
            └── pytz *
        pytest 5.4.3 pytest: simple powerful testing with Python
        ├── atomicwrites >=1.0
        ├── attrs >=17.4.0
        ├── colorama *
        ├── more-itertools >=4.0.0
        ├── packaging *
        │   └── pyparsing >=2.0.2,<3.0.5 || >3.0.5
        ├── pluggy >=0.12,<1.0
        ├── py >=1.5.0
        └── wcwidth *

  * To show software requirement latest
    $ poetry show --latest

        attrs           21.4.0 21.4.0 Classes Without Boilerplate
        more-itertools  8.13.0 8.13.0 More routines for operating on iterables, beyond itertools
        packaging       21.3   21.3   Core utilities for Python packages
        pendulum        1.5.1  2.1.2  Python datetimes made easy.
        pluggy          0.13.1 1.0.0  plugin and hook calling mechanisms for python
        py              1.11.0 1.11.0 library with cross-python path, ini-parsing, io, code, log facilities
        pyparsing       3.0.9  3.0.9  pyparsing module - Classes and methods to define and execute parsing grammars
        pytest          5.4.3  7.1.2  pytest: simple powerful testing with Python
        python-dateutil 2.8.2  2.8.2  Extensions to the standard Python datetime module
        pytz            2022.1 2022.1 World timezone definitions, modern and historical
        pytzdata        2020.1 2020.1 The Olson timezone database for Python.
        six             1.16.0 1.16.0 Python 2 and 3 compatibility utilities
        tzlocal         1.5.1  4.2    tzinfo object for the local timezone
        wcwidth         0.2.5  0.2.5  Measures the displayed width of unicode strings in a terminal

  * To build and package your software
    $ poetry build

  * To publish your software to PyPI
    $ poetry publish

  Demo usage
  ==========
  1) Create a new project
    $ poetry new poetry-demo

      poetry-demo
      ├── pyproject.toml
      ├── README.rst
      ├── poetry_demo
      │   └── __init__.py
      └── tests
          ├── __init__.py
          └── test_poetry_demo.py

  2) pyproject.toml - used to orchestrate and organize your dependencies
        [tool.poetry]
        name = "poetry-demo"
        version = "0.1.0"
        description = ""
        authors = ["Ong Boon Leong <boon.leong.ong@intel.com>"]

        [tool.poetry.dependencies]
        python = "^3.9"

        [tool.poetry.dev-dependencies]
        pytest = "^5.2"

        [build-system]
        requires = ["poetry-core>=1.0.0"]
        build-backend = "poetry.core.masonry.api"

  3) To add software dependencies (say pendulum) to software project, you can either use:-
     $ poetry add pendulum
     OR
     Add "pendulum" software dependencies is added in [tool.poetry.dependencies]
        [tool.poetry.dependencies]
        python = "^3.9"
        pendulum = "^1.4"

      Note: pendulum: replacement for "datetime" Python class.
            https://pendulum.eustace.io

  4) To run a script under poetry:-
     $ poetry run python3 <your_script.py>
     OR
     $ poetry run <python command>

  Reference
  =========
  [1] https://python-poetry.org/

EOF
}

function summary_python_ipython() {
cat << EOF

  Summary of IPython
  ==================
  * An extended Python command shell that provides functionalities e.g.,
    - Dynamic object introspection
    - System shell access from the prompt
    - Multiline code editing
    - Syntax highlighting
    - Copy-paste helpers
    - Direct profiling support
    - Debugging facilities

  * IPython can be installed from:-
    a) pip install ipython
    b) IPython is a part of a larger project called Jupyter, which
       provides interactive notebooks with live code that can be
       written in many different languages.
       https://jupyter.org/install

  * Jupyter notebook will soon be replaced with Jupyter lab:
    https://github.com/jupyterlab/jupyterlab

  * Inside ipython, we can use ? or ?? to instrospect function and its
    documents:-
    ----------------------------------------------------------------------
    In [5]: import urllib

    In [6]: urllib.parse.urlunparse?
        Signature: urllib.parse.urlunparse(components)
        Docstring:
        Put a parsed URL back together again.  This may result in a
        slightly different, but equivalent URL, if the URL that was parsed
        originally had redundant delimiters, e.g. a ? with an empty query
        (the draft states that these are equivalent).
        File:      ~/opt/anaconda3/lib/python3.8/urllib/parse.py
        Type:      function

    In [7]: urllib.parse.urlunparse??
        Signature: urllib.parse.urlunparse(components)
        Source:
        def urlunparse(components):
            """Put a parsed URL back together again.  This may result in a
            slightly different, but equivalent URL, if the URL that was parsed
            originally had redundant delimiters, e.g. a ? with an empty query
            (the draft states that these are equivalent)."""
            scheme, netloc, url, params, query, fragment, _coerce_result = (
                                                          _coerce_args(*components))
            if params:
                url = "%s;%s" % (url, params)
            return _coerce_result(urlunsplit((scheme, netloc, url, query, fragment)))
        File:      ~/opt/anaconda3/lib/python3.8/urllib/parse.py
        Type:      function
    ----------------------------------------------------------------------

EOF
}

function summary_python_debugging() {
cat << EOF

  Summary of Python debugging
  ===========================
  * Python debugger is known as 'pdb'.

  * To enter post-mortem debugging if program exits abnormally:-
    $ python3 -m pdb -c continue script.py
    OR
    $ python3 -i script.py

  * Once the interactive session is opened, start the post-mortem
    debugging session as follow:-
    >>> import pdb
    >>> pdb.pm()

  * You can insert break-point to your code by using 'breakpoint()'
    E.g.,
    -------------------------------------------------
    import math

    def circumference(r: float):
      breakpoint()
      return 2 * math.pi * r
    -------------------------------------------------

    Note: Before Python 3.7, replace breakpoint() with
          import pdb; pdb.set_trace()

  * Inside pdb debugging session (Pdb), you can show the pdb
    commands using 'help pdb'.

EOF
}

function summary_python_xml() {
cat << EOF

  Summary of Python XML Processing
  ================================

  A) DOM (Document Object Model) API:

    * Web browser exposes DOM (Document Object Model) interface through
      Java Script for HTML, XML manipulation.

    * DOM defines operations for traversing and modifying doc elements
      in hierarchy of objects (doc tree) which is stored in memory for
      random access (omni-directional navigation).

    * As DOM renders entire doc tree ad once (memory consuming), it is
      only suitable for moderately large configuration files.

  B) SAX (Simple API for XML):

    * Event-based streaming API that operates sequentially on individual
      elements instead of whole doc tree.

    * Elements are processed from top to bottom and as specific XML nodes
      is found, user-defined callbacks are triggered by the SAX parser.

    * Elements may be discarded if there is no interest in processing.
      This means memory footprint is lower than DOM. It works well for
      parsing very large doc.

    * SAX parsing is good for single-pass, read-only processing such as
      indexing, conversion to other formats.

    * SAX is NOT suitable for random tree nodes, multi-pass parsing,
      deeply nested elements and etc.

  C) StAX (Streaming API for XML)

    * SAX is push model where interested element is pushed to app through
      event-based callback. StAX is built on top of SAX and uses streaming
      for pull parsing model.

    * StAX acts as iteractor advancing cursor over XML object across entire
      XML doc where custom handlers call the parser on demand. The events in
      the stream is only consumed when requested (lazy evaluation).

  * It is possible to combine more than one XML parsing model. Use SAX or StAX
    for quick parsing and build DOM representation on particular doc branch in
    memory.

  * Python standard library defines abstract interfaces for parsing XML doc
    which by default bundles a binding for a C-based XML parsing library
    called Expat (https://github.com/libexpat/libexpat)

  Detail of Minimal DOM implementation
  ------------------------------------
  1) xml.dom package has two modules:
     a) xml.dom.minidom
        - stripped down implementation of DOM interface on relatively old version
          of W3C spec with poor documentation and limited usefulness.
        - provides DOM API such as Document, Element, Attr.

    b) xml.dom.pulldom
        - defines streaming pull parser that optionally produce DOM representation
          of the current node in the doc tree.

  2) Unless an XML element is marked specifically in the Doc Type, by default
     XML element is not searchable using ID
     <!--ATTLIST linearGradient id ID #IMPLIED-->

  3) So, we need to mark XML ID recursively using .setIdAttribute():-

    from xml.dom.minidom import parse, Node

    def set_id_attribute(parent, attribute_name="id"):
        if parent.nodeType == Node.ELEMENT_NODE:
            if parent.hasAttribute(attribute_name):
                parent.setIdAttribute(attribute_name)
        for child in parent.childNodes:
            set_id_attribute(child, attribute_name)

    document = parse("doc.svg")
    set_id_attribute(document)
    document.getElementById("skin")

EOF
}

function summary_python_pyenv() {
cat << EOF
  pyenv             - manages multiple version of Python installation
  virtualenv/venv   - manages virtual environments for a specific Python version
  pyenv-virtualenv  - manages virtual environments for across different Python versions.

  $ pyenv commands              - Show all available commands
  $ pyenv <cmd> --help          - Show detailed of <cmd>
  $ pyenv install <version>     - Install Python version
  $ pyenv install --list        - Show available Python version
  $ pyenv versions              - Show all installed Python version
  $ pyenv version               - Show currently used Python version
  $ pyenv which <cmd>           - Show full path of <cmd>
  $ pyenv global <ver>          - Set the Python global version
  $ pyenv local <ver>           - Set an application specific Python version
                                  It puts .python-version in your current
                                  application directory
  $ pyenv shell <ver>           - Set a shell-specific Python version.
                                  It sets environment variable PYENV_VERSION.
                                  It overwrites setting by:-
                                  a) .python-version file
                                  b) \$HOME/.pyenv/version
                                  c) System Python

  pyenv-virtualenv  - manages virtual environments for across different Python versions.

  The steps for creating a virtual environment specific on a specific Python version:
  1) $ pyenv virtualenv <python-version> <environment-name>
     Note: Normally environment name is the same as project name
           It also installs couple of Python packages e.g. pip, wheel, setuptools

  2) $ pyenv local <environment-name>
     Note: This creates .python-version and the environment is automatically
           activated, because 'eval $(pyenv vrtualenv-init -)' in the .bash_aliases

  3) If you want to add another Python version to the same environment where-by
     <environment-name> take precendence over <another-python-version>
     $ pyenv local <environment-name> <another-python-version>

  3) $ pyenv which python
     $ pyenv which pip
     Note: To check the Python version that is in-use now.

  4) $ pyenv activate <environment-name> or pyenv deactivate
     Note: This is done automatically when it enters or exits a directory

  Using pip inside pyenv
  ----------------------
  1) Select the Python version that you want to set globally or locally
     $ pyenv global <version>
     OR
     $ pyenv local <version> under a specific working directory

  2) Use pip as usual
     * Check that pip version is tied to the pyenv managed python version
       $ pip --version

     * List the installed package
       $ pip list

     * Install/Uninstall new Python package
       $ pip install/uninstall <package>

     * Show pip supported command
       $ pip --help

  3) Search for Python packages in https://pypi.org

  [1] https://realpython.com/intro-to-pyenv/#virtual-environments-and-pyenv
EOF
}

function summary_python_devel() {
cat << EOF

  Python module & package
  =======================
  * Python module that contains Python code and has namespace
    containing arbitrary Python objects (class, members & function).
    Module is loaded into Python interpreter by 'import', e.g.

    import math
    import math as m
    from math import pi
    from math import as PI

    Normally, Python module corresponds to one or more .py file
    containing Python code.

  * A Python package is Python module which contains submodules or
    recursively subpackages. Python package normally corresponds to
    a directory and optionally a '__init__.py' file inside it.
    - __init__.py defines which submodule and subpackage to be imported
      when higher level Python package is imported.
    - if __init__.py does not exist, Python package is treated as
      namespace packages.

  * Python looks for module and package in its following order of
    import path:-
    - current directory
    - content of PYTHONPATH
    - installation directories

    Note: to prevent module namespace conflict, top-level module
          and package should be unique.

  * car/
    |--- __init__.py
    |    {
    |      from . import door
    |      from . import dashboard
    |      from . import chasis
    |    }
    |
    |--- chasis.py
    |
    |--- door/
    |     |---- __init__.py
    |     |     {
    |     |       from . import window
    |     |       from . import door-handle
    |     |     }
    |     |---- window.py
    |     |---- door-handle.py
    |
    |--- dashboard/
          |--- __init__.py
          |    {
          |      from . import speedometer
          |      from . import fuel
          |    }
          |--- speedometer.py
          |--- fuel.py

    Note: The '.' refers current package.
          To import specific module inside a Python package:

              import car.door.window
              import car.dashboard.speedometer

          Above import assumes that car package is installed.

  * To install a Python package, it needs both setup.cfg and
    setup.py for pip install.

    For example:-
    setup.cfg
    ---------
    [metadata]
    name = <package name>
    version = 0.1.0

    [options]
    packages = <directory>

    setup.py
    --------
    import setuptools
    setuptools.setup()

    Then, we install the Python package as editable from
    the same level where setup.cfg presents

    python3 -m pip install -e .

EOF
}
