#!/bin/bash

INSTALL=
VMNAME=
ISOPATH=
KSPATH=
VCPUS=2
MEMORY_MB=1024
STORAGE_GB=20
BRIDGE=virbr0
MACADDR="RANDOM"
DEBUG=

VMIMAGEDIR=/var/lib/libvirt

function usage() {
cat << EOF
    ovirt [OPTIONS]
    OPTIONS:
        -H        Show help message
        -S        Show vm list and net list
        -O        Show supported os variant type

        -I        Install new vm
        -n        Virtual Machine Name
        -i        Full path of OS iso file
        -k        Full path of OS installation kickstart file
        -c        VCPUs count
        -r        System Memory RAM size in MB
        -s        Storage size in GB
        -b        Bridge interface to use
        -m        MAC address used by VM
        -d        Debug mode
EOF
}

function print_topic() {
    echo -e "\n# $@"
}

function run_cmd() {
    COLOR='\033[0;36m'
    NCOLOR='\033[0m'
    echo -e "$COLOR\$ $@ $NCOLOR"
    eval $@
}

function print_cmd() {
    COLOR='\033[0;36m'
    NCOLOR='\033[0m'
    echo -e "$COLOR\$ $@ $NCOLOR"
}

function ovirt_show() {
    print_topic Show virtual machine status
    run_cmd virsh list
    run_cmd virsh net-list
}

function ovirt_osinfo() {
    print_topic "Show OS variant (E.g. virt-install ... --os-variant=ubuntu20.04 ...)"
    run_cmd osinfo-query os
}

while getopts "HSOIn:i:k:c:r:s:b:m:d" option; do
    case "${option}"
    in
        H)
            usage
            exit 0
            ;;
        S)
            ovirt_show
            exit 0
            ;;
        O)
            ovirt_osinfo
            exit 0
            ;;
        I) INSTALL=true;;
        n) VMNAME=${OPTARG};;
        i) ISOPATH=${OPTARG};;
        k) KSPATH=${OPTARG};;
        c) VCPUS=${OPTARG};;
        r) MEMORY_MB=${OPTARG};;
        s) STORAGE_GB=${OPTARG};;
        b) BRIDGE=${OPTARG};;
        m) MACADDR=${OPTARG};;
        d) DEBUG=true;;
    esac
done

if [ x"$INSTALL" == x"true" ]; then
    if [ -z $VMNAME ] || [ -z $ISOPATH ] || [ -z $KSPATH ] ; then
        usage
        exit 0
    fi

    run_cmd sudo mkdir -p $VMIMAGEDIR/xml
    run_cmd sudo mkdir -p $VMIMAGEDIR/images

    CMD="virt-install \
      --name="$VMNAME" \
      --connect=qemu:///system \
      --check-cpu --vcpus="$VCPUS" --arch x86_64 --virt-type=kvm \
      --ram="$MEMORY_MB" \
      --disk="$VMIMAGEDIR/images/$VMNAME.img,bus=virtio,size=${STORAGE_GB}" \
      --bridge="$BIRDGE" --mac="$MACADDR" \
      --watchdog=default --graphics=none \
      --autostart --force \
      --noautoconsole \
      --debug \
      --os-type=linux --location="$ISOPATH" \
      --extra-args="ks=file:/${KSPATH} console=tty0 console=ttyS0,115200n8 serial" \
      --initrd-inject="${KSPATH}" \
    "

    # If not debug mode, connect to the VM for installation
    if [ ! -z $DEBUG ]; then
        run_cmd virsh console "$VMNAME"
        run_cmd virsh start "$VMNAME"
    fi

    # Backup the VM's XML definition file
    run_cmd ' sudo virsh dumpxml "$VMNAME" > "$VMIMAGEDIR/xml/$VMNAME.xml" '
    exit 0
fi

usage

# Good reference:-
# https://blog.programster.org/kvm-cheatsheet
# https://linux.die.net/man/1/virt-install