#!/bin/bash

INSTALL=
DELETE=
CLONE=

PERVM=
ISOPATH=
KSPATH=
OSVARIANT=
VCPUS=2
MEMORY_MB=1024
STORAGE_GB=20
BRIDGE=virbr0
MACADDR="RANDOM"

PERVM_OPS=
VOL_OPS=
VOL_NAME=
VOL_TARGET=

VMIMAGEDIR=/var/lib/libvirt

function usage() {
cat << EOF
    ovirt [OPTIONS]
    OPTIONS:
        -H        Show help message
        -S        Show vm list and net list
        -O        Show supported os variant type
        -M        Show miscellanous of virsh commands

        -N <VM>   Control VM domain specific
                    If <VM>=ALL, apply to all VMs
          -x             Start Virtual Machine
          -e             Stop  Virtual Machine
          -t             Reboot Virtual Machine
          -p             Suspend Virtual Machine
          -m             Resume Virtual Machine

        -V <VM>    Manage storage volume for specific VM
          -a               Add volume
          -d               Delete volume
          -v <vol name>    Specify volume name
          -s <size>        Storage size in GB
          -g <target name> Disk device target

        -C <Source VM> <New VM>   Clone VM name

        -I <VM>     Install new vm
          -i        Full path of OS iso file
          -o        OS variant
          -k        Full path of OS installation kickstart file
          -c        VCPUs count
          -r        System Memory RAM size in MB
          -s        Storage size in GB
          -b        Bridge interface to use
          -m        MAC address used by VM

        -D <VM name>  Delete a vm
EOF
}

function print_topic() {
    echo -e "\n# $@"
}

function run_cmd() {
    COLOR='\033[0;36m'
    NCOLOR='\033[0m'
    echo -e "$COLOR\$ $@ $NCOLOR"
    eval $@
}

function print_cmd() {
    COLOR='\033[0;36m'
    NCOLOR='\033[0m'
    echo -e "$COLOR\$ $@ $NCOLOR"
}

function ovirt_show() {
    print_topic Show Host node info
    run_cmd sudo virsh nodeinfo
    print_topic Show virtual machine status
    run_cmd virsh list --all
    run_cmd virsh net-list
    run_cmd sudo virsh pool-list
    run_cmd sudo virsh vol-list images
}

function ovirt_osinfo() {
    print_topic "Show OS variant (E.g. virt-install ... --os-variant=ubuntu20.04 ...)"
    run_cmd osinfo-query os
}

function ovirt_misc_cmd() {
    print_topic To rename VM
    print_cmd "virsh domrename <old_name> <new_name> \n"
    print_topic To enable autostart VM
    print_cmd "virsh autostart <vm_name> \n"
    print_topic To disable autostart VM
    print_cmd "virsh autostart --disable <vm_name> \n"
    print_topic To force shutdown VM
    print_cmd "virsh destroy <vm_name> \n"
    print_topic To remove a VM
    print_cmd "virsh undefine <vm_name> --remove-all-storage \n"
    print_topic To connect to VM console
    print_cmd "virsh console <vm_name> --force \n"
    print_topic To save VM state
    print_cmd "virsh save <vm_name> <vm_name-desc.saved> \n"
    print_topic To restore VM state
    print_cmd "virsh restore <vm_name-desc.saved> \n"
    print_topic To create VM snapshot
    print_cmd "virsh snapshot-create-as --domain <vm_name> --name <snapshot_name> --description \"text\"  \n"
    print_topic To list VM snapshot
    print_cmd "virsh snapshot-list <vm_name> \n"
    print_topic To display VM snapshot info
    print_cmd "virsh snapshot-info --domain <vm_name> --snapshotname <snapshot_name> \n"
    print_topic To revert VM snapshot info
    print_cmd "virsh snapshot-revert --domain <vm_name> --snapshotname <snapshot_name> --running \n"
    print_topic To delete VM snapshot info
    print_cmd "virsh snapshot-delete --domain <vm_name> --snapshotname <snapshot_name> \n"
}

while getopts "HSOMxetpmadIC:D:N:V:v:g:i:o:k:c:r:s:b:m:d" option; do
    case "${option}"
    in
        H)
            usage
            exit 0
            ;;
        S)
            ovirt_show
            exit 0
            ;;
        O)
            ovirt_osinfo
            exit 0
            ;;
        M)
            ovirt_misc_cmd
            exit 0
            ;;
        N) PERVM=${OPTARG};;
          x) PERVM_OPS=start;;
          e) PERVM_OPS=stop;;
          t) PERVM_OPS=reboot;;
          p) PERVM_OPS=suspend;;
          m) PERVM_OPS=resume;;

        V) PERVM=${OPTARG};;
          a) VOL_OPS=add;;
          d) VOL_OPS=delete;;
          v) VOL_NAME=${OPTARG};;
          g) VOL_TARGET=${OPTARG};;

        C) CLONE=true
          PERVM=${OPTARG}
          ;;

        D) DELETE=true
          PERVM=${OPTARG}
          ;;

        I) INSTALL=true
          PERVM=${OPTARG}
          ;;
          i) ISOPATH=${OPTARG};;
          o) OSVARIANT=${OPTARG};;
          k) KSPATH=${OPTARG};;
          c) VCPUS=${OPTARG};;
          r) MEMORY_MB=${OPTARG};;
          s) STORAGE_GB=${OPTARG};;
          b) BRIDGE=${OPTARG};;
          m) MACADDR=${OPTARG};;
    esac
done

if [ x"$PERVM_OPS" != x"" ] && [ x"$PERVM" != x"" ]; then
    if [ x"$PERVM" == x"ALL" ]; then
        if [ x"$PERVM_OPS" == x"start" ]; then
            VMLIST=$(sudo virsh list --all | grep "shut off" | awk '{print $2}')
            for VM in $VMLIST; do
                run_cmd virsh start $VM
                run_cmd virsh dominfo $VM
            done
        fi
        if [ x"$PERVM_OPS" == x"stop" ]; then
            VMLIST=$(sudo virsh list --all | grep "running" | awk '{print $2}')
            for VM in $VMLIST; do
                run_cmd virsh shutdown $VM
                run_cmd sleep 10
                run_cmd virsh dominfo $VM
            done
        fi
        if [ x"$PERVM_OPS" == x"reboot" ]; then
            VMLIST=$(sudo virsh list --all | grep "running" | awk '{print $2}')
            for VM in $VMLIST; do
                run_cmd virsh reboot $VM
            done
        fi
        if [ x"$PERVM_OPS" == x"suspend" ]; then
            VMLIST=$(sudo virsh list --all | grep "running" | awk '{print $2}')
            for VM in $VMLIST; do
                run_cmd virsh suspend $VM
            done
        fi
        if [ x"$PERVM_OPS" == x"resume" ]; then
            VMLIST=$(sudo virsh list --all | grep "paused" | awk '{print $2}')
            for VM in $VMLIST; do
                run_cmd virsh resume $VM
            done
        fi        
    else
        if [ x"$PERVM_OPS" == x"start" ]; then
            run_cmd virsh start $PERVM
            run_cmd virsh dominfo $PERVM
        fi
        if [ x"$PERVM_OPS" == x"stop" ]; then
            run_cmd virsh shutdown $PERVM
            run_cmd sleep 10
            run_cmd virsh dominfo $PERVM
        fi
        if [ x"$PERVM_OPS" == x"reboot" ]; then
                run_cmd virsh reboot $PERVM
        fi
        if [ x"$PERVM_OPS" == x"suspend" ]; then
                run_cmd virsh suspend $PERVM
        fi
        if [ x"$PERVM_OPS" == x"resume" ]; then
                run_cmd virsh resume $PERVM
        fi
    fi
    exit 0
fi

if [ x"$VOL_OPS" != x"" ] && [ x"$PERVM" != x"" ]; then
    if [ x"$VOL_OPS" == x"add" ]; then
        run_cmd sudo virsh vol-create-as images ${VOL_NAME}.qcow2 ${STORAGE_GB}
        run_cmd sudo du -sh /var/lib/libvirt/images/${VOL_NAME}.qcow2
        run_cmd sudo virsh attach-disk --domain ${PERVM} \
                        --source /var/lib/libvirt/images/${VOL_NAME}.qcow2 \
                        --persistent --target ${VOL_TARGET}
        run_cmd sudo virsh pool-refresh images
        run_cmd sudo virsh vol-list images
    fi
    if [ x"$VOL_OPS" == x"delete" ]; then
        run_cmd sudo virsh detach-disk --domain ${PERVM} --persistent --live \
                        --target ${VOL_TARGET}
        run_cmd sudo virsh vol-delete ${VOL_NAME}.qcow2 --pool images
        run_cmd sudo virsh pool-refresh images
        run_cmd sudo virsh vol-list images
    fi
    exit 0
fi

if [ x"$CLONE" == x"true" ]; then
    shift $((OPTIND -1))
    NEWVM=$1
    run_cmd sudo virt-clone --connect qemu:///system --original ${PERVM} --name ${NEWVM} \
                    --file /var/lib/libvirt/images/${NEWVM}.qcow2
    exit 0
fi

if [ x"$INSTALL" == x"true" ]; then
    if [ -z ${PERVM} ] || [ -z $ISOPATH ] || [ -z $KSPATH ]; then
        usage
        exit 0
    fi

    KSFILE=$(basename "$KSPATH")

    run_cmd sudo mkdir -p $VMIMAGEDIR/xml
    run_cmd sudo mkdir -p $VMIMAGEDIR/images

    virt-install \
      --name "${PERVM}" \
      --connect qemu:///system \
      --check-cpu --vcpus "$VCPUS" --arch x86_64 --virt-type kvm \
      --ram "$MEMORY_MB" \
      --disk "$VMIMAGEDIR/images/$PERVM.img,bus=virtio,size=${STORAGE_GB}" \
      --bridge "$BRIDGE" --mac "$MACADDR" \
      --watchdog default --graphics none \
      --autostart --force \
      --debug \
      --os-variant "$OSVARIANT" --location "$ISOPATH" \
      --console "pty,target_type=serial" \
      --extra-args "console=tty0 console=ttyS0,115200n8 serial"

    # If not debug mode, connect to the VM for installation
    #run_cmd virsh console "${PERVM}"
    #run_cmd virsh start "${PERVM}"

    # Backup the VM's XML definition file
    #sudo virsh dumpxml "${PERVM}" > "$VMIMAGEDIR/xml/${PERVM}.xml"
    exit 0
fi

if [ x"$DELETE" == x"true" ] && [ ! -z ${PERVM} ]; then
    if [ -f $VMIMAGEDIR/images/${PERVM}.img ]; then
        run_cmd virsh destroy "${PERVM}"
        run_cmd virsh undefine "${PERVM}" --remove-all-storage
        run_cmd sudo ls $VMIMAGEDIR/images/
        run_cmd sudo rm $VMIMAGEDIR/images/${PERVM}.img
    else
        run_cmd virsh destroy "${PERVM}"
        run_cmd virsh undefine "${PERVM}" --remove-all-storage
    fi

    if [ -f $VMIMAGEDIR/xml/${PERVM}.xml ]; then
        run_cmd sudo ls $VMIMAGEDIR/xml/
        run_cmd sudo rm $VMIMAGEDIR/xml/${PERVM}.xml
    fi

    exit 0
fi

usage

# Good reference:-
# https://blog.programster.org/kvm-cheatsheet
# https://linux.die.net/man/1/virt-install