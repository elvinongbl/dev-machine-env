#!/bin/bash

COMMAND=$1

VMIMAGEDIR=/var/lib/libvirt
MACADDR=00:11:22:33:44:55

function usage() {
cat << EOF
    ovirt COMMAND
    COMMAND:
        help        Show help message
        show        Show vm list and net list
        top         Show vm statistics using virt-top
        osinfo      Show supported os variant type
        misc        Show miscellanous of virsh commands

        pervm <VM> SUBCOMMAND       Control VM domain specific.
                                     If <VM>=all, apply to all VMs
            SUBCOMMAND:
                start       Start Virtual Machine
                stop        Stop  Virtual Machine
                reboot      Reboot Virtual Machine
                suspend     Suspend Virtual Machine
                resume      Resume Virtual Machine
                show        Show Virtual Machine info

            Specific to VM:
                syslog             Show /var/log/messages of Virtual Machine
                setvcpus <count>   Set Virtual Machine vcpus count
                setmem   <size>    Set Virtual Machine memory size
                autostart on|off   Set Virtual Machine autostart option

        vol <VM> SUBCOMMAND         Manage storage volume for
                                     specific VM
            SUBCOMMAND:
                show               Show volume attached to vm

                add OPTIONS        Add volume
                    -v <vol name>       Volume name
                    -s <vol size>       Volume size
                    -g <target>         Disk device target, e.g vdb

                del OPTIONS        Delete volume
                    -v <vol name>       Volume name

                resize OPTIONS     Resize volume size
                    -v <vol name>       Volume name
                    -s +/-<vol resize>  Volume size increased

        clone <Source VM> <Dest VM> Clone new VM

        del <VM>                    Delete a VM

        install <VM> OPTIONS        Install a new vm
          -i ISOPATH       Full path of OS iso file
          -o OSVARIAN      OS variant (Hint: ovirt osinfo)
          -c VCPUCOUNT     VCPUs count
          -r MEMSIZE       System Memory size in MB. Default: 1024
          -s VOLSIZE       Storage size. Default: 20G
          -b VIRBRIDGE     Bridge interface to use. Default: virbr0
          -m MACADDR       MAC address used by VM. Default: ${MACADDR}
EOF
}

function print_topic() {
    echo -e "\n# $@"
}

function run_cmd() {
    COLOR='\033[0;36m'
    NCOLOR='\033[0m'
    echo -e "$COLOR\$ $@ $NCOLOR"
    eval $@
}

function print_cmd() {
    COLOR='\033[0;36m'
    NCOLOR='\033[0m'
    echo -e "$COLOR\$ $@ $NCOLOR"
}

function ovirt_show() {
    print_topic Show Host node info
    run_cmd sudo virsh nodeinfo
    print_topic Show virtual machine status
    run_cmd virsh list --all
    run_cmd virsh net-list
    run_cmd sudo virsh pool-list
    run_cmd sudo virsh vol-list images --details
}

function ovirt_top() {
    print_topic Show run-time stats about vm
    run_cmd sudo virt-top
}

function ovirt_osinfo() {
    print_topic "Show OS variant (E.g. virt-install ... --os-variant=ubuntu20.04 ...)"
    run_cmd osinfo-query os
}

function ovirt_misc_cmd() {
    print_topic To rename VM
    print_cmd "virsh domrename <old_name> <new_name> \n"
    print_topic To enable autostart VM
    print_cmd "virsh autostart <vm_name> \n"
    print_topic To disable autostart VM
    print_cmd "virsh autostart --disable <vm_name> \n"
    print_topic To force shutdown VM
    print_cmd "virsh destroy <vm_name> \n"
    print_topic To remove a VM
    print_cmd "virsh undefine <vm_name> --remove-all-storage \n"
    print_topic To connect to VM console
    print_cmd "virsh console <vm_name> --force \n"
    print_topic To save VM state
    print_cmd "virsh save <vm_name> <vm_name-desc.saved> \n"
    print_topic To restore VM state
    print_cmd "virsh restore <vm_name-desc.saved> \n"
    print_topic To create VM snapshot
    print_cmd "virsh snapshot-create-as --domain <vm_name> --name <snapshot_name> --description \"text\"  \n"
    print_topic To list VM snapshot
    print_cmd "virsh snapshot-list <vm_name> \n"
    print_topic To display VM snapshot info
    print_cmd "virsh snapshot-info --domain <vm_name> --snapshotname <snapshot_name> \n"
    print_topic To revert VM snapshot info
    print_cmd "virsh snapshot-revert --domain <vm_name> --snapshotname <snapshot_name> --running \n"
    print_topic To delete VM snapshot info
    print_cmd "virsh snapshot-delete --domain <vm_name> --snapshotname <snapshot_name> \n"
    print_topic To list directory under a VM
    print_cmd "virt-ls -l -d <vm_name> <directory>"
    print_topic To cat a file under a VM
    print_cmd "virt-cat -d <vm_name> <file_path>"
    print_topic To edit a file under a VM
    print_cmd "virt-edit -d <vm_name> <file_path>"
}

function ovirt_pervm_ops() {
    local op_done=false

    # For pervm all <sub command>
    if [ x"$PERVM" == x"all" ]; then
        if [ x"$PERVM_OPS" == x"start" ]; then
            VMLIST=$(sudo virsh list --all | grep "shut off" | awk '{print $2}')
            for VM in $VMLIST; do
                run_cmd virsh start $VM
                run_cmd virsh dominfo $VM
            done
            op_done=true
        fi
        if [ x"$PERVM_OPS" == x"stop" ]; then
            VMLIST=$(sudo virsh list --all | grep "running" | awk '{print $2}')
            for VM in $VMLIST; do
                run_cmd virsh shutdown $VM
                run_cmd sleep 10
                run_cmd virsh dominfo $VM
            done
            op_done=true
        fi
        if [ x"$PERVM_OPS" == x"reboot" ]; then
            VMLIST=$(sudo virsh list --all | grep "running" | awk '{print $2}')
            for VM in $VMLIST; do
                run_cmd virsh reboot $VM
            done
            op_done=true
        fi
        if [ x"$PERVM_OPS" == x"suspend" ]; then
            VMLIST=$(sudo virsh list --all | grep "running" | awk '{print $2}')
            for VM in $VMLIST; do
                run_cmd virsh suspend $VM
            done
            op_done=true
        fi
        if [ x"$PERVM_OPS" == x"resume" ]; then
            VMLIST=$(sudo virsh list --all | grep "paused" | awk '{print $2}')
            for VM in $VMLIST; do
                run_cmd virsh resume $VM
            done
            op_done=true
        fi
        if [ x"$PERVM_OPS" == x"show" ]; then
            VMLIST=$(sudo virsh list --all | awk '{print $2}')
            for VM in $VMLIST; do
                run_cmd virsh dominfo $VM
            done
            op_done=true
        fi
    else
        # For pervm <vm_name> <sub command>
        if [ x"$PERVM_OPS" == x"start" ]; then
            run_cmd virsh start $PERVM
            run_cmd virsh dominfo $PERVM
            op_done=true
        fi
        if [ x"$PERVM_OPS" == x"stop" ]; then
            run_cmd virsh shutdown $PERVM
            run_cmd sleep 10
            run_cmd virsh dominfo $PERVM
            op_done=true
        fi
        if [ x"$PERVM_OPS" == x"reboot" ]; then
            run_cmd virsh reboot $PERVM
            op_done=true
        fi
        if [ x"$PERVM_OPS" == x"suspend" ]; then
            run_cmd virsh suspend $PERVM
            op_done=true
        fi
        if [ x"$PERVM_OPS" == x"resume" ]; then
            run_cmd virsh resume $PERVM
            op_done=true
        fi
        if [ x"$PERVM_OPS" == x"show" ]; then
            run_cmd virsh dominfo $PERVM
            op_done=true
        fi
        if [ x"$PERVM_OPS" == x"syslog" ]; then
            run_cmd sudo virt-log -d $PERVM | less
            op_done=true
        fi
        if [ x"$PERVM_OPS" == x"setvcpus" ]; then
            run_cmd virsh setvcpus --domain $PERVM --maximum $VCPUSCOUNT --config
            run_cmd virsh setvcpus --domain $PERVM --count $VCPUSCOUNT --config
            run_cmd virsh shutdown $PERVM
            run_cmd sleep 10
            run_cmd virsh start $PERVM
            run_cmd virsh dominfo $PERVM
            op_done=true
        fi
        if [ x"$PERVM_OPS" == x"setmem" ]; then
            run_cmd virsh setmaxmem $PERVM $MEMSIZE --config
            run_cmd virsh setmem $PERVM $MEMSIZE --config
            run_cmd virsh shutdown $PERVM
            run_cmd sleep 10
            run_cmd virsh start $PERVM
            run_cmd virsh dominfo $PERVM
            op_done=true
        fi
        if [ x"$PERVM_OPS" == x"autostart" ]; then
            if [ x"$AUTO" == x"on" ]; then
                run_cmd virsh autostart $PERVM
                run_cmd virsh dominfo $PERVM
                op_done=true
            fi
            if [ x"$AUTO" == x"off" ]; then
                run_cmd virsh autostart --disable $PERVM
                run_cmd virsh dominfo $PERVM
                op_done=true
            fi
        fi
    fi # End of pervm all <sub command>

    if [ x"${op_done}" == x"false" ]; then
        usage
    fi
}

function ovirt_vol_ops() {
    op_done=false

    if [ x"${VOL_OPS}" == x"show" ]; then
        run_cmd virsh domblklist ${PERVM} --inactive --details
        vol_list=$(virsh domblklist ${PERVM} --inactive --details | grep disk | awk '{print $4}')
        for vol in $vol_list; do
            volname=$(basename $vol)
            run_cmd virsh vol-info --pool images $volname
        done
        run_cmd sudo virt-df -d ${PERVM}
        run_cmd sudo virt-filesystems -d ${PERVM} --all --long --uuid -h
        op_done=true
    fi

    if [ x"${VOL_OPS}" == x"add" ] && [ x"${VOL_NAME}" != x"" ] && [ x"${VOL_TARGET}" != x"" ] && [ x"${STORAGE}" != x"" ]; then
        run_cmd sudo virsh vol-create-as images ${VOL_NAME}.qcow2 ${STORAGE}
        run_cmd sudo du -sh ${VMIMAGEDIR}/images/${VOL_NAME}.qcow2
        run_cmd sudo virsh attach-disk --domain ${PERVM} \
                        --source ${VMIMAGEDIR}/images/${VOL_NAME}.qcow2 \
                        --persistent --target ${VOL_TARGET}
        run_cmd sudo virsh pool-refresh images
        run_cmd sudo virsh vol-list images
        op_done=true
    fi

    if [ x"$VOL_OPS" == x"del" ] && [ x"${VOL_NAME}" != x"" ] && [ x"${VOL_TARGET}" != x"" ]; then
        run_cmd sudo virsh detach-disk --domain ${PERVM} \
                        --persistent --live --target ${VOL_TARGET}
        run_cmd sudo virsh vol-delete ${VOL_NAME}.qcow2 --pool images
        run_cmd sudo virsh pool-refresh images
        run_cmd sudo virsh vol-list images
        op_done=true
    fi

    if [ x"$VOL_OPS" == x"resize" ] && [ x"${VOL_NAME}" != x"" ] && [ x"${STORAGE}" != x"" ]; then
        shrink=$(echo ${STORAGE} | grep '-' -c)
        run_cmd sudo virsh detach-disk --domain ${PERVM} \
                        --persistent --live --target ${VOL_TARGET}
        # Wait for system detach disk completely
        run_cmd sleep 5
        if [ x"$shrink" == x"1" ]; then
            run_cmd sudo qemu-img resize --shrink \
                        ${VMIMAGEDIR}/images/${VOL_NAME}.qcow2 ${STORAGE}
        else
            run_cmd sudo qemu-img resize \
                        ${VMIMAGEDIR}/images/${VOL_NAME}.qcow2 ${STORAGE}
        fi
        run_cmd sudo virsh attach-disk --domain ${PERVM} \
                        --source ${VMIMAGEDIR}/images/${VOL_NAME}.qcow2 \
                        --persistent --target ${VOL_TARGET}
        op_done=true
    fi

    if [ x"${op_done}" == x"false" ]; then
        usage
    fi
}

function ovirt_delete() {
    if [ -f $VMIMAGEDIR/images/${PERVM}.img ]; then
        run_cmd virsh destroy "${PERVM}"
        run_cmd virsh undefine "${PERVM}" --remove-all-storage
        run_cmd sudo ls $VMIMAGEDIR/images/
        run_cmd sudo rm $VMIMAGEDIR/images/${PERVM}.img
    else
        run_cmd virsh destroy "${PERVM}"
        run_cmd virsh undefine "${PERVM}" --remove-all-storage
        run_cmd sudo ls $VMIMAGEDIR/images/
    fi

    if [ -f $VMIMAGEDIR/xml/${PERVM}.xml ]; then
        run_cmd sudo rm $VMIMAGEDIR/xml/${PERVM}.xml
        run_cmd sudo ls $VMIMAGEDIR/xml/
    fi
}

function ovirt_install() {
    VCPUS=2
    MEMORY_MB=1024
    STORAGE=20
    BRIDGE=virbr0

    while getopts "i:o:k:c:r:b:m:" option; do
        case "${option}"
        in
          i) ISOPATH=${OPTARG};;
          o) OSVARIANT=${OPTARG};;
          k) KSPATH=${OPTARG};;
          c) VCPUS=${OPTARG};;
          r) MEMORY_MB=${OPTARG};;
          s) STORAGE=${OPTARG};;
          b) BRIDGE=${OPTARG};;
          m) MACADDR=${OPTARG};;
        esac
    done

    if [ -z ${PERVM} ] || [ -z $ISOPATH ]; then
        usage
        exit 0
    fi

    KSFILE=$(basename "$KSPATH")

    run_cmd sudo mkdir -p $VMIMAGEDIR/xml
    run_cmd sudo mkdir -p $VMIMAGEDIR/images

    virt-install \
      --name "${PERVM}" \
      --connect qemu:///system \
      --check-cpu --vcpus "$VCPUS" --arch x86_64 --virt-type kvm \
      --ram "$MEMORY_MB" \
      --disk "$VMIMAGEDIR/images/$PERVM.img,bus=virtio,size=${STORAGE}" \
      --bridge "$BRIDGE" --mac "$MACADDR" \
      --watchdog default --graphics none \
      --autostart --force \
      --debug \
      --os-variant "$OSVARIANT" --location "$ISOPATH" \
      --console "pty,target_type=serial" \
      --extra-args "console=tty0 console=ttyS0,115200n8 serial"

    # If not debug mode, connect to the VM for installation
    #run_cmd virsh console "${PERVM}"
    #run_cmd virsh start "${PERVM}"

    # Backup the VM's XML definition file
    #sudo virsh dumpxml "${PERVM}" > "$VMIMAGEDIR/xml/${PERVM}.xml"
}

if [ x"$COMMAND" == x"help" ] || [ x"$COMMAND" == x"" ]; then
    usage
    exit 0
fi
if [ x"$COMMAND" == x"show" ]; then
    ovirt_show
    exit 0
fi
if [ x"$COMMAND" == x"top" ]; then
    ovirt_top
    exit 0
fi
if [ x"$COMMAND" == x"osinfo" ]; then
    ovirt_osinfo
    exit 0
fi
if [ x"$COMMAND" == x"misc" ]; then
    ovirt_misc_cmd
    exit 0
fi
if [ x"$COMMAND" == x"pervm" ]; then
    shift
    PERVM=$1
    PERVM_OPS=$2
    if [ x"$PERVM_OPS" != x"" ] && [ x"$PERVM" != x"" ]; then
        if [ x"$PERVM_OPS" == x"setvcpus" ]; then
            VCPUSCOUNT=$3
        fi
        if [ x"$PERVM_OPS" == x"setmem" ]; then
            MEMSIZE=$3
        fi
        if [ x"$PERVM_OPS" == x"autostart" ]; then
            AUTO=$3
        fi
        ovirt_pervm_ops
    else
        usage
    fi
    exit 0
fi
if [ x"$COMMAND" == x"vol" ]; then
    shift
    PERVM=$1
    VOL_OPS=$2
    if [ x"$VOL_OPS" != x"" ] && [ x"$PERVM" != x"" ]; then
        shift 2
        while getopts "v:s:g:" option; do
            case "${option}"
            in
              v) VOL_NAME=${OPTARG};;
              g) VOL_TARGET=${OPTARG};;
              s) STORAGE=${OPTARG};;
            esac
        done
        ovirt_vol_ops
    else
        usage
    fi
    exit 0
fi
if [ x"$COMMAND" == x"clone" ]; then
    shift
    PERVM=$1
    NEWVM=$2
    run_cmd sudo virt-clone --connect qemu:///system --original ${PERVM} --name ${NEWVM} \
                    --file /var/lib/libvirt/images/${NEWVM}.qcow2
    exit 0
fi
if [ x"$COMMAND" == x"del" ]; then
    shift
    PERVM=$1
    ovirt_delete
    exit 0
fi
if [ x"$COMMAND" == x"install" ]; then
    shift
    PERVM=$1
    shift
    ovirt_install
    exit 0
fi

usage

# Good reference:-
# https://blog.programster.org/kvm-cheatsheet
# https://linux.die.net/man/1/virt-install