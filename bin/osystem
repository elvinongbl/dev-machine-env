#!/bin/bash

CHOICE=$1

function usage() {
cat << EOF
    osystem COMMAND
    COMMAND:
        help        Show help message
        cpu         Show CPU information (model, count & frequency)
        cpukhz      Show CPU runtime Mhz using i7z
        thermal     Show CPU thermal zone and trip-point
EOF
}

function print_topic() {
    NCOLOR='\033[0m'
    echo -e "\n${NCOLOR}# $@ ${NCOLOR}"
}

function print_line() {
    NCOLOR='\033[0m'
    echo -e "${NCOLOR}==========================================${NCOLOR}"
}

function run_cmd() {
    COLOR='\033[0;36m'
    NCOLOR='\033[0m'
    echo -e "$COLOR\$ $@ $NCOLOR"
    eval $@
}

function print_cmd() {
    COLOR='\033[0;36m'
    NCOLOR='\033[0m'
    echo -e "$COLOR\$ $@ $NCOLOR"
}

function print_warn() {
    COLOR='\033[0;31m'
    NCOLOR='\033[0m'
    echo -e "$COLOR $@ $NCOLOR"
}

function acat() {
    local file=$1
    if [ -f $file ]; then
        echo "$(cat $file)"
    else
        echo "N/A"
    fi
}

function osystem_cpu() {
    local tmpfile=~/.tmpcpuinfo
    print_line
    run_cmd sudo cat /etc/lsb-release
    print_line

    print_cmd sudo cat /proc/cpuinfo
    sudo cat /proc/cpuinfo > $tmpfile
    model_name=$(cat $tmpfile | grep "model name" -m 1)
    processor_count=$(cat $tmpfile | grep "processor" -c)
    cache_size=$(cat $tmpfile | grep "cache size" -m 1)
    cpu_mhz=$(cat $tmpfile | grep "cpu MHz")
    echo -e "CPU information :- \
       \n${model_name} \
       \nprocessor count : ${processor_count} \
       \n${cache_size} \
       \n${cpu_mhz} \
    "
    rm $tmpfile
}

function osystem_cpukhz() {
    # print CPU khz run-time on current terminal
    # i7z understands i3, i5 & i7 CPU
    run_cmd sudo i7z
}

function osystem_thermal() {
    local syspath=/sys/class/thermal
    local cool_dev_max=$(find $syspath -name "cooling_device*" | wc -l)
    local ther_zone_max=$(find $syspath -name "thermal_zone*" | wc -l)

    printf "Cool Dev\tType\t\tModalias\tCur State\tMax State\n"
    for (( i = 0; i < $cool_dev_max; i++ )); do
        local devpath=$syspath/cooling_device$i

        local type=$(acat $devpath/type)
        local modalias=$(acat $devpath/device/modalias)
        local cur_state=$(acat $devpath/cur_state)
        local max_state=$(acat $devpath/max_state)

        printf "%8d\t%8s\t%s\t%8s\t%8s\n" $i $type $modalias $cur_state $max_state
    done

    printf "\nThemZone\tType\t\tTmpr\n"

    for (( i = 0; i < $ther_zone_max; i++ )); do
        local devpath=$syspath/thermal_zone$i
        local type=$(acat $devpath/type)
        local temp=$(acat $devpath/temp)

        local trip_p_max=$(find $devpath/ -name "trip_point_*_temp" | wc -l)

        printf "%8d\t%8s\t%d\tTrip Points(%d):\t" $i $type $temp $trip_p_max

        for (( j = 0; j < $trip_p_max; j++ )); do
            local trip_temp="$devpath/trip_point_"$j"_temp"
            local trip_type="$devpath/trip_point_"$j"_type"
            local p_temp=$(acat $trip_temp)
            local p_type=$(acat $trip_type)
            if (( $j%2 == 0 )) ; then
                printf "\n\t\t\t\t\t\t"
            fi
            printf "%8d [%s]\t" $p_temp $p_type
        done
        printf "\n"
    done
}

if [ $# -eq 0 ]; then
    echo -e "Invalid input or usage"
    usage
    exit
fi

if [ x"$CHOICE" == x"cpu" ]; then
    osystem_cpu
    exit
fi

if [ x"$CHOICE" == x"cpukhz" ]; then
    osystem_cpukhz
    exit
fi

if [ x"$CHOICE" == x"thermal" ]; then
    osystem_thermal
    exit
fi

if [ x"$CHOICE" == x"help" ]; then
    usage
    exit
fi

echo -e "Invalid input or usage"
usage
